{
    "collab_server" : "",
    "contents" : "library(data.table)\nlibrary(XML)\nif(!exists(\"requireTable\")){ source(\"tableLoader.R\") }\n#source(\"specialTagHandlers.R\")\n\n# insertConditionalCode(ele.tag,attrsEle2Quote$filter, echoQuote, filterQuote),\n# insertConditionalCode(ele.tag,attrsEle2Quote$fill, echoQuote, fillQuote),\n# insertConditionalCode(ele.tag,attrsEle2Quote$clip.path, echoQuote, clipPathQuote),\n# insertConditionalCode(ele.tag,attrsEle2Quote$mask, echoQuote, maskQuote),\n# insertConditionalCode(ele.tag,attrsEle2Quote$marker, echoQuote, markerEndQuote),\n# insertConditionalCode(ele.tag,attrsEle2Quote$marker, echoQuote, markerMidQuote),\n# insertConditionalCode(ele.tag,attrsEle2Quote$marker, echoQuote, markerStartQuote),\n# insertConditionalCode(ele.tag, c('text' , 'textPath' , 'tspan'), echoQuote, textQuote),\n# insertConditionalCode(ele.tag, c(\"linearGradient\",  \"radialGradient\"), echoQuote, gradientColorQuote)            \n# \n# translate=function(dx,dy=NULL){\n#   \n#   list(translate=c(dx,dy))\n# },\n# rotate=function(angle, x=NULL, y=NULL){\n#   \n#   list(rotate=c(angle,x,y))     \n# },\n# rotatR=function(angle, x=NULL, y=NULL){\n#   \n#   tmp<-c(angle,x,y)\n#   tmp[1]<-as.numeric(tmp[1])*180/pi #convert from radians to degrees\n#   list(rotate=tmp)     \n# },\n# scale=function(dx,dy=NULL){\n#   \n#   list(scale=c(dx,dy))\n# },\n# \n# #\n# \n\n\n# gradXtra<-list(\n#   linearGradient=c(\"colors\",\"offsets\"),\n#   radialGradient=c(\"colors\",\"offsets\")\n# )\n\n\nrequireTable(AET.DT, COP1.DT, PA.DT)\n\nsupports.cxy<-function(ele.tag){\n  ifelse(\n    nrow(AET.DT[  element==ele.tag & \n                    (attr=='x' | attr=='y' | attr=='width' | attr=='height') ,]\n    )==4,\n    ele.tag,\n    NULL\n  )  \n}\n\nxywh<-c('x','y','width','height')\n# all elements\nele.tags<-unique(AET.DT$element)\n#all attributes\n#ele.tags.attributeName<-AET.DT[attr==\"attributeName\"]$element\n#tmp<-lapply(ele.tags, supports.cxy)\nAET.DT[attr %in% xywh,]->tmp.DT\ntmp.DT[,.N, by=element]->tmp2.DT\ntmp2.DT[N==4,element]->cxySupported\ncxySupported<-c(c('text' , 'textPath' , 'tspan'),cxySupported)\n\nrequireTable(\n  \"AVEL.DT\", \"AVD.DT\",  \"es.DT\",   \"eaCS.DT\", \"PA.DT\",  \n  \"COP.DT\",  \"COP1.DT\", \"AET.DT\"  \n)\n\n# PA.DT has items that need to be expanded, such as:\nlist(\n  \"marker properties\"=c( \"marker-start\", \"marker-mid\", \"marker-end\")\n)\n# \t‘path’, ‘line’, ‘polyline’ ‘polygon’ all apply to marker properties\n\n# want: for each element, all valid attributes\n# given the results from validateAttribute.R\n# add to element list, the right stuff\n\n# start with ele.attr and add newAttr\n# ele.attr[[ele]]<-c(ele.attr[[ele]], newAttr)\n\nxywh<-c('x','y','width','height')\nAET.DT[attr %in% xywh,]->tmp.DT\ntmp.DT[,.N, by=element]->tmp2.DT\ntmp2.DT[N==4,element]->cxySupported\ncxySupported<-c(c('text' , 'textPath' , 'tspan'),cxySupported)\n\n\neleList<- cxySupported\nfor(el in eleList){\n  ele.attr[[el]]<-c(ele.attr[[el]], \"cxy\")\n}\neleList<-c( \"path\", \"line\", \"polyline\", \"polygon\")\nfor(el in eleList){\n  ele.attr[[el]]<-c(ele.attr[[el]], \"marker-start\")\n  ele.attr[[el]]<-c(ele.attr[[el]], \"marker-mid\")\n  ele.attr[[el]]<-c(ele.attr[[el]], \"marker-end\")\n}\n\neleList<-c( \"linearGradient\", \"radialGradient\")\nfor(el in eleList){\n  ele.attr[[el]]<-c(ele.attr[[el]], \"colors\")\n  ele.attr[[el]]<-c(ele.attr[[el]], \"offsets\")\n}\n\ngetMissingAttrs<-function(el){\n  attrs<-c()\n  if(el %in% cxySupported){\n    attrs<-c(attrs,\"cxy\")\n  }\n  if(el %in% c( \"path\", \"line\", \"polyline\", \"polygon\") ){\n    attrs<-c(attrs,\"marker-start\",  \"marker-mid\", \"marker-end\")\n  }\n  if(el %in% c( \"linearGradient\", \"radialGradient\") ){\n    attrs<-c(attrs,\"colors\",  \"offsets\")\n  }\n  attrs\n}",
    "created" : 1487987047413.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1877012261",
    "id" : "D7690305",
    "lastKnownWriteTime" : 1487997461,
    "last_content_update" : 1487997461939,
    "path" : "~/development/pegjs/buildSvgrParseList/specialAttrs.R",
    "project_path" : "specialAttrs.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}