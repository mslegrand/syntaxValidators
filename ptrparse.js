/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = "\r",
      peg$c1 = peg$literalExpectation("\r", false),
      peg$c2 = "\n",
      peg$c3 = peg$literalExpectation("\n", false),
      peg$c4 = peg$anyExpectation(),
      peg$c5 = ";",
      peg$c6 = peg$literalExpectation(";", false),
      peg$c7 = "!",
      peg$c8 = peg$literalExpectation("!", false),
      peg$c9 = "NULL",
      peg$c10 = peg$literalExpectation("NULL", false),
      peg$c11 = "NA",
      peg$c12 = peg$literalExpectation("NA", false),
      peg$c13 = "Inf",
      peg$c14 = peg$literalExpectation("Inf", false),
      peg$c15 = "NaN",
      peg$c16 = peg$literalExpectation("NaN", false),
      peg$c17 = "TRUE",
      peg$c18 = peg$literalExpectation("TRUE", false),
      peg$c19 = "FALSE",
      peg$c20 = peg$literalExpectation("FALSE", false),
      peg$c21 = "next",
      peg$c22 = peg$literalExpectation("next", false),
      peg$c23 = "break",
      peg$c24 = peg$literalExpectation("break", false),
      peg$c25 = "{",
      peg$c26 = peg$literalExpectation("{", false),
      peg$c27 = "}",
      peg$c28 = peg$literalExpectation("}", false),
      peg$c29 = "if",
      peg$c30 = peg$literalExpectation("if", false),
      peg$c31 = "(",
      peg$c32 = peg$literalExpectation("(", false),
      peg$c33 = ")",
      peg$c34 = peg$literalExpectation(")", false),
      peg$c35 = "else",
      peg$c36 = peg$literalExpectation("else", false),
      peg$c37 = "for",
      peg$c38 = peg$literalExpectation("for", false),
      peg$c39 = "in",
      peg$c40 = peg$literalExpectation("in", false),
      peg$c41 = "while",
      peg$c42 = peg$literalExpectation("while", false),
      peg$c43 = "repeat",
      peg$c44 = peg$literalExpectation("repeat", false),
      peg$c45 = "function",
      peg$c46 = peg$literalExpectation("function", false),
      peg$c47 = "+",
      peg$c48 = peg$literalExpectation("+", false),
      peg$c49 = "-",
      peg$c50 = peg$literalExpectation("-", false),
      peg$c51 = "=",
      peg$c52 = peg$literalExpectation("=", false),
      peg$c53 = "...",
      peg$c54 = peg$literalExpectation("...", false),
      peg$c55 = ",",
      peg$c56 = peg$literalExpectation(",", false),
      peg$c57 = function() {
          addError( "comma issues", location() ); 
          return "comma";
      },
      peg$c58 = function() { 
          addError( "comma issues", location() ); 
          return "comma";
      },
      peg$c59 = "[",
      peg$c60 = peg$literalExpectation("[", false),
      peg$c61 = "]",
      peg$c62 = peg$literalExpectation("]", false),
      peg$c63 = "[[",
      peg$c64 = peg$literalExpectation("[[", false),
      peg$c65 = "]]",
      peg$c66 = peg$literalExpectation("]]", false),
      peg$c67 = function(head, tail, rightParen) {
          // Check each tail element which is an svgR call and see if it's belongs to the content model of the head element
          var i, tailTok, tailLoc, result, headTok = head;
          //console.log("svgRCall");
          if(tail){
              for( i=0; i< tail.length; i++){
                  if(tail[i]){
                      //console.log("\nsvgRCall tail:[" + i + "]\n" + JSON.stringify(tail[i]) +"\n");
                      if(tail[i] instanceof SvgEleInfo){
                          tailTok=tail[i].token;
                          if(allElements.hasValue( tailTok ) ){
                              // if bad, record in warnings ow do nothing
                              if(!acceptContentEle[headTok].hasValue(tailTok)){
                                  tailLoc=tail[i].location;
                                  addWarning( "Warning: " + tailTok + " not in content model of " + headTok, tailLoc );
                                  //break;  // may want to remove this break
                              }
                          }
                      } else {
                          if(tail[i] instanceof SvgAttrInfo){
                              tailTok=tail[i].token;
                              if(!acceptedAttributes[headTok].hasValue(tailTok)){
                                  tailLoc=tail[i].location;
                                  addWarning( "Warning: " + tailTok + " not an attribute of " + headTok, tailLoc );
                              }
                          }
                      }
                  }
              }
          }
          if( rightParen ){
              //showResult("rightParen=", rightParen);
          } else {
              addError("Missing Closing Right Parenthesis", location() );
          }
          // in any case, return head
          result= new SvgEleInfo(headTok, location());
           if( options.cursorPos ){
               pushContext(result, options.cursorPos);
           }
          return result;
      },
      peg$c68 = function(attr) {
         var result;
         //showResult("svgRNamedParam Attr-",attr);
         result= new SvgAttrInfo(attr, location());
      //   console.log("\nsvgRNamedParam Result:\n" + JSON.stringify(result) + "\n" ) ;
         return result;},
      peg$c69 = function() {
          var result = elem;
          //showResult("svgRUnnamedParam Elem-",elem);
          //result= new SvgEleInfo(elem, location());
      //    console.log("\nsvgRUnnamedParam Result:\n" + JSON.stringify(result) + "\n" ) ;
          return result;
      },
      peg$c70 = function(head, tail) {   
          var result=tail, loc;
      //    console.log("svgRparamCombo1");
          if(result){
              loc=location();
      //        console.log("svgRparamCombo1: tail=" + result);
      //        printLocation(loc);
      //        console.log(loc);
              //result=new SvgEleInfo(result, loc);
          } else {
      //        console.log("svgRparamCombo1: result is null");
          }
      //    console.log("\nsvgRparamCombo1 Result:\n" + JSON.stringify(result) + "\n" ) ;
          //console.log(result);  
          return result;
      },
      peg$c71 = function(tail) { 
          var result=tail;
      //    console.log("svgRparamCombo2");
          //if(result)
          //    result=new SvgEleInfo(tail, location());
          addError( "comma issues", location() ); 
      //    console.log("\nsvgRparamCombo2 Result:\n" + JSON.stringify(result) +"\n");
          return result;
      },
      peg$c72 = function(tail) {
          var result=tail;
          var resultType;
       //   console.log("svgRparamCombo12");
          if(result){
              resultType = typeof result;
      //        console.log("svgRparamCombo12: typeof result =" + resultType);
      //        console.log(JSON.stringify(result));
          } else {
      //        console.log("svgRparamCombo12: result is null");
          }
      //    console.log("\nsvgRparamCombo12 Result:\n" + JSON.stringify(result) +"\n");
          return result;
      },
      peg$c73 = function(head, tail) {
          var result = tail;
          var resultType =typeof head;
          
      //    console.log("svgRparamCombo12: typeof head =" + resultType);

      //    console.log("Entering svgRparameters");
          if(result){
              resultType = typeof result;
      //        console.log("svgRparamCombo12: typeof tail =" + resultType);
              result.unshift(head);
          } else {
              result = [head];
          }
      //    console.log("\nsvgRparameters Result:\n" + JSON.stringify(result) +"\n");
          return result;
      },
      peg$c74 = /^[><:+&*\-.$=\/]/,
      peg$c75 = peg$classExpectation([">", "<", ":", "+", "&", "*", "-", ".", "$", "=", "/"], false, false),
      peg$c76 = "%",
      peg$c77 = peg$literalExpectation("%", false),
      peg$c78 = "<<-",
      peg$c79 = peg$literalExpectation("<<-", false),
      peg$c80 = "->>",
      peg$c81 = peg$literalExpectation("->>", false),
      peg$c82 = ":::",
      peg$c83 = peg$literalExpectation(":::", false),
      peg$c84 = "<-",
      peg$c85 = peg$literalExpectation("<-", false),
      peg$c86 = "==",
      peg$c87 = peg$literalExpectation("==", false),
      peg$c88 = "::",
      peg$c89 = peg$literalExpectation("::", false),
      peg$c90 = ">=",
      peg$c91 = peg$literalExpectation(">=", false),
      peg$c92 = "!=",
      peg$c93 = peg$literalExpectation("!=", false),
      peg$c94 = "||",
      peg$c95 = peg$literalExpectation("||", false),
      peg$c96 = "&&",
      peg$c97 = peg$literalExpectation("&&", false),
      peg$c98 = ":=",
      peg$c99 = peg$literalExpectation(":=", false),
      peg$c100 = "<=",
      peg$c101 = peg$literalExpectation("<=", false),
      peg$c102 = "->",
      peg$c103 = peg$literalExpectation("->", false),
      peg$c104 = "$",
      peg$c105 = peg$literalExpectation("$", false),
      peg$c106 = "@",
      peg$c107 = peg$literalExpectation("@", false),
      peg$c108 = "^",
      peg$c109 = peg$literalExpectation("^", false),
      peg$c110 = ":",
      peg$c111 = peg$literalExpectation(":", false),
      peg$c112 = "*",
      peg$c113 = peg$literalExpectation("*", false),
      peg$c114 = "/",
      peg$c115 = peg$literalExpectation("/", false),
      peg$c116 = ">",
      peg$c117 = peg$literalExpectation(">", false),
      peg$c118 = "<",
      peg$c119 = peg$literalExpectation("<", false),
      peg$c120 = "&",
      peg$c121 = peg$literalExpectation("&", false),
      peg$c122 = "|",
      peg$c123 = peg$literalExpectation("|", false),
      peg$c124 = "~",
      peg$c125 = peg$literalExpectation("~", false),
      peg$c126 = /^[\n\r\u2028\u2029]/,
      peg$c127 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false),
      peg$c128 = /^[\t\x0B\f \xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/,
      peg$c129 = peg$classExpectation(["\t", "\x0B", "\f", " ", "\xA0", "\uFEFF", "\u1680", "\u180E", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false),
      peg$c130 = /^[a-zA-Z]/,
      peg$c131 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
      peg$c132 = ".",
      peg$c133 = peg$literalExpectation(".", false),
      peg$c134 = "_",
      peg$c135 = peg$literalExpectation("_", false),
      peg$c136 = function(head, tail) {
          var result = tail;
          if(result){
              result.unshift(head);
              result=result.join("");
          } else {
              result=head
          }
          //showResult("idword", result); 
          return result;
      },
      peg$c137 = "feComponentTransfer",
      peg$c138 = peg$literalExpectation("feComponentTransfer", false),
      peg$c139 = "feSpecularLighting",
      peg$c140 = peg$literalExpectation("feSpecularLighting", false),
      peg$c141 = "feDiffuseLighting",
      peg$c142 = peg$literalExpectation("feDiffuseLighting", false),
      peg$c143 = "feDisplacementMap",
      peg$c144 = peg$literalExpectation("feDisplacementMap", false),
      peg$c145 = "animateTransform",
      peg$c146 = peg$literalExpectation("animateTransform", false),
      peg$c147 = "feConvolveMatrix",
      peg$c148 = peg$literalExpectation("feConvolveMatrix", false),
      peg$c149 = "font.face.format",
      peg$c150 = peg$literalExpectation("font.face.format", false),
      peg$c151 = "feDistantLight",
      peg$c152 = peg$literalExpectation("feDistantLight", false),
      peg$c153 = "feGaussianBlur",
      peg$c154 = peg$literalExpectation("feGaussianBlur", false),
      peg$c155 = "font.face.name",
      peg$c156 = peg$literalExpectation("font.face.name", false),
      peg$c157 = "linearGradient",
      peg$c158 = peg$literalExpectation("linearGradient", false),
      peg$c159 = "radialGradient",
      peg$c160 = peg$literalExpectation("radialGradient", false),
      peg$c161 = "animateMotion",
      peg$c162 = peg$literalExpectation("animateMotion", false),
      peg$c163 = "color.profile",
      peg$c164 = peg$literalExpectation("color.profile", false),
      peg$c165 = "feColorMatrix",
      peg$c166 = peg$literalExpectation("feColorMatrix", false),
      peg$c167 = "font.face.src",
      peg$c168 = peg$literalExpectation("font.face.src", false),
      peg$c169 = "font.face.uri",
      peg$c170 = peg$literalExpectation("font.face.uri", false),
      peg$c171 = "foreignObject",
      peg$c172 = peg$literalExpectation("foreignObject", false),
      peg$c173 = "missing.glyph",
      peg$c174 = peg$literalExpectation("missing.glyph", false),
      peg$c175 = "altGlyphItem",
      peg$c176 = peg$literalExpectation("altGlyphItem", false),
      peg$c177 = "animateColor",
      peg$c178 = peg$literalExpectation("animateColor", false),
      peg$c179 = "feMorphology",
      peg$c180 = peg$literalExpectation("feMorphology", false),
      peg$c181 = "fePointLight",
      peg$c182 = peg$literalExpectation("fePointLight", false),
      peg$c183 = "feTurbulence",
      peg$c184 = peg$literalExpectation("feTurbulence", false),
      peg$c185 = "altGlyphDef",
      peg$c186 = peg$literalExpectation("altGlyphDef", false),
      peg$c187 = "feComposite",
      peg$c188 = peg$literalExpectation("feComposite", false),
      peg$c189 = "feMergeNode",
      peg$c190 = peg$literalExpectation("feMergeNode", false),
      peg$c191 = "feSpotLight",
      peg$c192 = peg$literalExpectation("feSpotLight", false),
      peg$c193 = "font.face",
      peg$c194 = peg$literalExpectation("font.face", false),
      peg$c195 = "altGlyph",
      peg$c196 = peg$literalExpectation("altGlyph", false),
      peg$c197 = "clipPath",
      peg$c198 = peg$literalExpectation("clipPath", false),
      peg$c199 = "feOffset",
      peg$c200 = peg$literalExpectation("feOffset", false),
      peg$c201 = "glyphRef",
      peg$c202 = peg$literalExpectation("glyphRef", false),
      peg$c203 = "metadata",
      peg$c204 = peg$literalExpectation("metadata", false),
      peg$c205 = "polyline",
      peg$c206 = peg$literalExpectation("polyline", false),
      peg$c207 = "textPath",
      peg$c208 = peg$literalExpectation("textPath", false),
      peg$c209 = "animate",
      peg$c210 = peg$literalExpectation("animate", false),
      peg$c211 = "ellipse",
      peg$c212 = peg$literalExpectation("ellipse", false),
      peg$c213 = "feBlend",
      peg$c214 = peg$literalExpectation("feBlend", false),
      peg$c215 = "feFlood",
      peg$c216 = peg$literalExpectation("feFlood", false),
      peg$c217 = "feFuncA",
      peg$c218 = peg$literalExpectation("feFuncA", false),
      peg$c219 = "feFuncB",
      peg$c220 = peg$literalExpectation("feFuncB", false),
      peg$c221 = "feFuncG",
      peg$c222 = peg$literalExpectation("feFuncG", false),
      peg$c223 = "feFuncR",
      peg$c224 = peg$literalExpectation("feFuncR", false),
      peg$c225 = "feImage",
      peg$c226 = peg$literalExpectation("feImage", false),
      peg$c227 = "feMerge",
      peg$c228 = peg$literalExpectation("feMerge", false),
      peg$c229 = "pattern",
      peg$c230 = peg$literalExpectation("pattern", false),
      peg$c231 = "polygon",
      peg$c232 = peg$literalExpectation("polygon", false),
      peg$c233 = "circle",
      peg$c234 = peg$literalExpectation("circle", false),
      peg$c235 = "cursor",
      peg$c236 = peg$literalExpectation("cursor", false),
      peg$c237 = "feTile",
      peg$c238 = peg$literalExpectation("feTile", false),
      peg$c239 = "filter",
      peg$c240 = peg$literalExpectation("filter", false),
      peg$c241 = "marker",
      peg$c242 = peg$literalExpectation("marker", false),
      peg$c243 = "script",
      peg$c244 = peg$literalExpectation("script", false),
      peg$c245 = "switch",
      peg$c246 = peg$literalExpectation("switch", false),
      peg$c247 = "symbol",
      peg$c248 = peg$literalExpectation("symbol", false),
      peg$c249 = "glyph",
      peg$c250 = peg$literalExpectation("glyph", false),
      peg$c251 = "hkern",
      peg$c252 = peg$literalExpectation("hkern", false),
      peg$c253 = "image",
      peg$c254 = peg$literalExpectation("image", false),
      peg$c255 = "mpath",
      peg$c256 = peg$literalExpectation("mpath", false),
      peg$c257 = "style",
      peg$c258 = peg$literalExpectation("style", false),
      peg$c259 = "title",
      peg$c260 = peg$literalExpectation("title", false),
      peg$c261 = "tspan",
      peg$c262 = peg$literalExpectation("tspan", false),
      peg$c263 = "vkern",
      peg$c264 = peg$literalExpectation("vkern", false),
      peg$c265 = "defs",
      peg$c266 = peg$literalExpectation("defs", false),
      peg$c267 = "desc",
      peg$c268 = peg$literalExpectation("desc", false),
      peg$c269 = "font",
      peg$c270 = peg$literalExpectation("font", false),
      peg$c271 = "line",
      peg$c272 = peg$literalExpectation("line", false),
      peg$c273 = "mask",
      peg$c274 = peg$literalExpectation("mask", false),
      peg$c275 = "path",
      peg$c276 = peg$literalExpectation("path", false),
      peg$c277 = "rect",
      peg$c278 = peg$literalExpectation("rect", false),
      peg$c279 = "stop",
      peg$c280 = peg$literalExpectation("stop", false),
      peg$c281 = "text",
      peg$c282 = peg$literalExpectation("text", false),
      peg$c283 = "tref",
      peg$c284 = peg$literalExpectation("tref", false),
      peg$c285 = "view",
      peg$c286 = peg$literalExpectation("view", false),
      peg$c287 = "svgR",
      peg$c288 = peg$literalExpectation("svgR", false),
      peg$c289 = "set",
      peg$c290 = peg$literalExpectation("set", false),
      peg$c291 = "svg",
      peg$c292 = peg$literalExpectation("svg", false),
      peg$c293 = "use",
      peg$c294 = peg$literalExpectation("use", false),
      peg$c295 = "a",
      peg$c296 = peg$literalExpectation("a", false),
      peg$c297 = "g",
      peg$c298 = peg$literalExpectation("g", false),
      peg$c299 = function(head, tail) {   
          var result =tail;
          return result;
      },
      peg$c300 = /^[0-9]/,
      peg$c301 = peg$classExpectation([["0", "9"]], false, false),
      peg$c302 = /^[Ll]/,
      peg$c303 = peg$classExpectation(["L", "l"], false, false),
      peg$c304 = "E",
      peg$c305 = peg$literalExpectation("E", false),
      peg$c306 = "e",
      peg$c307 = peg$literalExpectation("e", false),
      peg$c308 = "i",
      peg$c309 = peg$literalExpectation("i", false),
      peg$c310 = "0",
      peg$c311 = peg$literalExpectation("0", false),
      peg$c312 = "x",
      peg$c313 = peg$literalExpectation("x", false),
      peg$c314 = "X",
      peg$c315 = peg$literalExpectation("X", false),
      peg$c316 = /^[a-f]/,
      peg$c317 = peg$classExpectation([["a", "f"]], false, false),
      peg$c318 = /^[A-F]/,
      peg$c319 = peg$classExpectation([["A", "F"]], false, false),
      peg$c320 = "\\",
      peg$c321 = peg$literalExpectation("\\", false),
      peg$c322 = /^[0-3]/,
      peg$c323 = peg$classExpectation([["0", "3"]], false, false),
      peg$c324 = /^[0-7]/,
      peg$c325 = peg$classExpectation([["0", "7"]], false, false),
      peg$c326 = "u",
      peg$c327 = peg$literalExpectation("u", false),
      peg$c328 = /^[abtnfrv"'\\]/,
      peg$c329 = peg$classExpectation(["a", "b", "t", "n", "f", "r", "v", "\"", "'", "\\"], false, false),
      peg$c330 = "\"",
      peg$c331 = peg$literalExpectation("\"", false),
      peg$c332 = "'",
      peg$c333 = peg$literalExpectation("'", false),
      peg$c334 = /^["]/,
      peg$c335 = peg$classExpectation(["\""], false, false),
      peg$c336 = /^[']/,
      peg$c337 = peg$classExpectation(["'"], false, false),
      peg$c338 = "#",
      peg$c339 = peg$literalExpectation("#", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parseprogramme();

    return s0;
  }

  function peg$parseNL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 13) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c2;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpr_seperator() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsecomment();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseNL();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s0 = peg$c5;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
      }
    }

    return s0;
  }

  function peg$parseexpr_list() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseexpr();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse___();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseexpr_seperator();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseexpr();
              if (s9 !== peg$FAILED) {
                s6 = [s6, s7, s8, s9];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse___();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseexpr_seperator();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseexpr();
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprogramme() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseexpr_list();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEOF();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1, s2, s3;

    s0 = peg$parsesvgRCall();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse___();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebinary_expr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseatomic_expr() {
    var s0;

    s0 = peg$parseID();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSTRINGLITERAL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEX();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCOMPLEX();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFLOAT();
            if (s0 === peg$FAILED) {
              s0 = peg$parseINT();
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c9) {
                  s0 = peg$c9;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c11) {
                    s0 = peg$c11;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c12); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c13) {
                      s0 = peg$c13;
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c14); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c15) {
                        s0 = peg$c15;
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c17) {
                          s0 = peg$c17;
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c18); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c19) {
                            s0 = peg$c19;
                            peg$currPos += 5;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c21) {
                              s0 = peg$c21;
                              peg$currPos += 4;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c23) {
                                s0 = peg$c23;
                                peg$currPos += 5;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c24); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseleft_token_expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c25;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpr_list();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c27;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse___();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpr();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c33;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseexpr();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse___();
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c35) {
                            s11 = peg$c35;
                            peg$currPos += 4;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c36); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse_();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseexpr();
                              if (s13 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c29) {
          s1 = peg$c29;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse___();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c31;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexpr();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s7 = peg$c33;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c34); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseexpr();
                        if (s9 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c37) {
            s1 = peg$c37;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse___();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s3 = peg$c31;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseID();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c39) {
                        s7 = peg$c39;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c40); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseexpr();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s11 = peg$c33;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c34); }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parse_();
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parseexpr();
                                  if (s13 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c41) {
              s1 = peg$c41;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse___();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c31;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseexpr();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s7 = peg$c33;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c34); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseexpr();
                            if (s9 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c43) {
                s1 = peg$c43;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpr();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                  s1 = peg$c31;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpr();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s5 = peg$c33;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c34); }
                        }
                        if (s5 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 8) === peg$c45) {
                    s1 = peg$c45;
                    peg$currPos += 8;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse___();
                    if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c31;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseformals();
                          if (s5 === peg$FAILED) {
                            s5 = null;
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s7 = peg$c33;
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c34); }
                              }
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parse_();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseexpr();
                                  if (s9 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 43) {
                      s1 = peg$c47;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 45) {
                        s1 = peg$c49;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c50); }
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseexpr();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseformal() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c51;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseID();
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c53) {
          s0 = peg$c53;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
      }
    }

    return s0;
  }

  function peg$parseformalCombo1() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c55;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseformal();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseformalCombo2() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c55;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$parseformal();
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c57();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseformals() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseformal();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse___();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseformalCombo1();
        if (s5 === peg$FAILED) {
          s5 = peg$parseformalCombo2();
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseformalCombo1();
          if (s5 === peg$FAILED) {
            s5 = peg$parseformalCombo2();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparameter() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c51;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpr();
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c53) {
          s0 = peg$c53;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
      }
    }

    return s0;
  }

  function peg$parseparamCombo1() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c55;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseparameter();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparamCombo2() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c55;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$parseparameter();
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c58();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseparameters() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseparameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse___();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseparamCombo1();
        if (s5 === peg$FAILED) {
          s5 = peg$parseparamCombo2();
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseparamCombo1();
          if (s5 === peg$FAILED) {
            s5 = peg$parseparamCombo2();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslist_expr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c59;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesublist();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c61;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); }
              }
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedlist_expr() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c63) {
        s2 = peg$c63;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesublist();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c65) {
                s6 = peg$c65;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecall_expr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseparameters();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c33;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomposite_expr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleft_token_expr();
    if (s1 === peg$FAILED) {
      s1 = peg$parseatomic_expr();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseexpr_seperator();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsedlist_expr();
        if (s5 === peg$FAILED) {
          s5 = peg$parseslist_expr();
          if (s5 === peg$FAILED) {
            s5 = peg$parsecall_expr();
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseexpr_seperator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsedlist_expr();
          if (s5 === peg$FAILED) {
            s5 = peg$parseslist_expr();
            if (s5 === peg$FAILED) {
              s5 = peg$parsecall_expr();
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesvgRCall() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsekeySVGR();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c31;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesvgRparameters();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c33;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$parseEOF();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c67(s1, s4, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesvgRNamedParam() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c51;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c68(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesvgRUnnamedParam() {
    var s0, s1;

    s0 = peg$parsesvgRCall();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c53) {
          s1 = peg$c53;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c69();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsesvgRparameter() {
    var s0;

    s0 = peg$parsesvgRNamedParam();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesvgRUnnamedParam();
    }

    return s0;
  }

  function peg$parsesvgRparamCombo1() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c55;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesvgRparameter();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c70(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesvgRparamCombo2() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c55;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parsesvgRparameter();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c71(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesvgRparamCombo12() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesvgRparamCombo1();
      if (s2 === peg$FAILED) {
        s2 = peg$parsesvgRparamCombo2();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c72(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesvgRparameters() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesvgRparameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesvgRparamCombo12();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesvgRparamCombo12();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c73(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOP_SYMBOL() {
    var s0;

    if (peg$c74.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c75); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLETTER();
    }

    return s0;
  }

  function peg$parsebin_op() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c76;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseOP_SYMBOL();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseOP_SYMBOL();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s3 = peg$c76;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c78) {
        s0 = peg$c78;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c80) {
          s0 = peg$c80;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c82) {
            s0 = peg$c82;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c84) {
              s0 = peg$c84;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c86) {
                s0 = peg$c86;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c87); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c88) {
                  s0 = peg$c88;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c89); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c90) {
                    s0 = peg$c90;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c92) {
                      s0 = peg$c92;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c93); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c94) {
                        s0 = peg$c94;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c95); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c96) {
                          s0 = peg$c96;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c97); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c98) {
                            s0 = peg$c98;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c99); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c100) {
                              s0 = peg$c100;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c101); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c102) {
                                s0 = peg$c102;
                                peg$currPos += 2;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c103); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 36) {
                                  s0 = peg$c104;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c105); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 64) {
                                    s0 = peg$c106;
                                    peg$currPos++;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 94) {
                                      s0 = peg$c108;
                                      peg$currPos++;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 58) {
                                        s0 = peg$c110;
                                        peg$currPos++;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c111); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 42) {
                                          s0 = peg$c112;
                                          peg$currPos++;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 47) {
                                            s0 = peg$c114;
                                            peg$currPos++;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 43) {
                                              s0 = peg$c47;
                                              peg$currPos++;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c48); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 45) {
                                                s0 = peg$c49;
                                                peg$currPos++;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c50); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 62) {
                                                  s0 = peg$c116;
                                                  peg$currPos++;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 60) {
                                                    s0 = peg$c118;
                                                    peg$currPos++;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 38) {
                                                      s0 = peg$c120;
                                                      peg$currPos++;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.charCodeAt(peg$currPos) === 124) {
                                                        s0 = peg$c122;
                                                        peg$currPos++;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c123); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 126) {
                                                          s0 = peg$c124;
                                                          peg$currPos++;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c125); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.charCodeAt(peg$currPos) === 61) {
                                                            s0 = peg$c51;
                                                            peg$currPos++;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebinary_expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsecomposite_expr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse___();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsebin_op();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseexpr();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse___();
              if (s8 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7, s8];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebin_op();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpr();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse___();
                if (s8 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLineTerminator() {
    var s0;

    if (peg$c126.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c127); }
    }

    return s0;
  }

  function peg$parseWS() {
    var s0;

    if (peg$c128.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c129); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseWS();
    if (s1 === peg$FAILED) {
      s1 = peg$parseLineTerminator();
      if (s1 === peg$FAILED) {
        s1 = peg$parsecomment();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWS();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLineTerminator();
        if (s1 === peg$FAILED) {
          s1 = peg$parsecomment();
        }
      }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseWS();
    if (s1 === peg$FAILED) {
      s1 = peg$parsecomment();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWS();
      if (s1 === peg$FAILED) {
        s1 = peg$parsecomment();
      }
    }

    return s0;
  }

  function peg$parse___() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseWS();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWS();
    }

    return s0;
  }

  function peg$parseLETTER() {
    var s0;

    if (peg$c130.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }

    return s0;
  }

  function peg$parsekeyWord() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c37) {
          s1 = peg$c37;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c41) {
            s1 = peg$c41;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c43) {
              s1 = peg$c43;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c21) {
                s1 = peg$c21;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c39) {
                  s1 = peg$c39;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c40); }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseDIGIT();
      if (s3 === peg$FAILED) {
        s3 = peg$parseLETTER();
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidword() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseLETTER();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c132;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLETTER();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c134;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c135); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c132;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseLETTER();
      if (s3 === peg$FAILED) {
        s3 = peg$parseDIGIT();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c134;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c135); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c132;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
          }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseLETTER();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDIGIT();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c134;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c135); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c132;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c133); }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c136(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeySVGR() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c137) {
      s0 = peg$c137;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 18) === peg$c139) {
        s0 = peg$c139;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 17) === peg$c141) {
          s0 = peg$c141;
          peg$currPos += 17;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c142); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 17) === peg$c143) {
            s0 = peg$c143;
            peg$currPos += 17;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c144); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 16) === peg$c145) {
              s0 = peg$c145;
              peg$currPos += 16;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c146); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 16) === peg$c147) {
                s0 = peg$c147;
                peg$currPos += 16;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c148); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 16) === peg$c149) {
                  s0 = peg$c149;
                  peg$currPos += 16;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c150); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 14) === peg$c151) {
                    s0 = peg$c151;
                    peg$currPos += 14;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c152); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 14) === peg$c153) {
                      s0 = peg$c153;
                      peg$currPos += 14;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c154); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 14) === peg$c155) {
                        s0 = peg$c155;
                        peg$currPos += 14;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c156); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 14) === peg$c157) {
                          s0 = peg$c157;
                          peg$currPos += 14;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c158); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 14) === peg$c159) {
                            s0 = peg$c159;
                            peg$currPos += 14;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c160); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 13) === peg$c161) {
                              s0 = peg$c161;
                              peg$currPos += 13;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c162); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 13) === peg$c163) {
                                s0 = peg$c163;
                                peg$currPos += 13;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c164); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 13) === peg$c165) {
                                  s0 = peg$c165;
                                  peg$currPos += 13;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c166); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 13) === peg$c167) {
                                    s0 = peg$c167;
                                    peg$currPos += 13;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c168); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 13) === peg$c169) {
                                      s0 = peg$c169;
                                      peg$currPos += 13;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c170); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 13) === peg$c171) {
                                        s0 = peg$c171;
                                        peg$currPos += 13;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c172); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 13) === peg$c173) {
                                          s0 = peg$c173;
                                          peg$currPos += 13;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c174); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 12) === peg$c175) {
                                            s0 = peg$c175;
                                            peg$currPos += 12;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c176); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 12) === peg$c177) {
                                              s0 = peg$c177;
                                              peg$currPos += 12;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c178); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 12) === peg$c179) {
                                                s0 = peg$c179;
                                                peg$currPos += 12;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c180); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 12) === peg$c181) {
                                                  s0 = peg$c181;
                                                  peg$currPos += 12;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c182); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 12) === peg$c183) {
                                                    s0 = peg$c183;
                                                    peg$currPos += 12;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c184); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 11) === peg$c185) {
                                                      s0 = peg$c185;
                                                      peg$currPos += 11;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c186); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 11) === peg$c187) {
                                                        s0 = peg$c187;
                                                        peg$currPos += 11;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c188); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 11) === peg$c189) {
                                                          s0 = peg$c189;
                                                          peg$currPos += 11;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c190); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 11) === peg$c191) {
                                                            s0 = peg$c191;
                                                            peg$currPos += 11;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c192); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 9) === peg$c193) {
                                                              s0 = peg$c193;
                                                              peg$currPos += 9;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c194); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 8) === peg$c195) {
                                                                s0 = peg$c195;
                                                                peg$currPos += 8;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c196); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 8) === peg$c197) {
                                                                  s0 = peg$c197;
                                                                  peg$currPos += 8;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c198); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 8) === peg$c199) {
                                                                    s0 = peg$c199;
                                                                    peg$currPos += 8;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c200); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 8) === peg$c201) {
                                                                      s0 = peg$c201;
                                                                      peg$currPos += 8;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c202); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 8) === peg$c203) {
                                                                        s0 = peg$c203;
                                                                        peg$currPos += 8;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c204); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 8) === peg$c205) {
                                                                          s0 = peg$c205;
                                                                          peg$currPos += 8;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c206); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 8) === peg$c207) {
                                                                            s0 = peg$c207;
                                                                            peg$currPos += 8;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c208); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 7) === peg$c209) {
                                                                              s0 = peg$c209;
                                                                              peg$currPos += 7;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c210); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 7) === peg$c211) {
                                                                                s0 = peg$c211;
                                                                                peg$currPos += 7;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c212); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 7) === peg$c213) {
                                                                                  s0 = peg$c213;
                                                                                  peg$currPos += 7;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c214); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 7) === peg$c215) {
                                                                                    s0 = peg$c215;
                                                                                    peg$currPos += 7;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c216); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 7) === peg$c217) {
                                                                                      s0 = peg$c217;
                                                                                      peg$currPos += 7;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c218); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 7) === peg$c219) {
                                                                                        s0 = peg$c219;
                                                                                        peg$currPos += 7;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c220); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 7) === peg$c221) {
                                                                                          s0 = peg$c221;
                                                                                          peg$currPos += 7;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c222); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 7) === peg$c223) {
                                                                                            s0 = peg$c223;
                                                                                            peg$currPos += 7;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c224); }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 7) === peg$c225) {
                                                                                              s0 = peg$c225;
                                                                                              peg$currPos += 7;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c226); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 7) === peg$c227) {
                                                                                                s0 = peg$c227;
                                                                                                peg$currPos += 7;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c228); }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 7) === peg$c229) {
                                                                                                  s0 = peg$c229;
                                                                                                  peg$currPos += 7;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c230); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 7) === peg$c231) {
                                                                                                    s0 = peg$c231;
                                                                                                    peg$currPos += 7;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c232); }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 6) === peg$c233) {
                                                                                                      s0 = peg$c233;
                                                                                                      peg$currPos += 6;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c234); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 6) === peg$c235) {
                                                                                                        s0 = peg$c235;
                                                                                                        peg$currPos += 6;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c236); }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 6) === peg$c237) {
                                                                                                          s0 = peg$c237;
                                                                                                          peg$currPos += 6;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c238); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 6) === peg$c239) {
                                                                                                            s0 = peg$c239;
                                                                                                            peg$currPos += 6;
                                                                                                          } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c240); }
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 6) === peg$c241) {
                                                                                                              s0 = peg$c241;
                                                                                                              peg$currPos += 6;
                                                                                                            } else {
                                                                                                              s0 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c242); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 6) === peg$c243) {
                                                                                                                s0 = peg$c243;
                                                                                                                peg$currPos += 6;
                                                                                                              } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c244); }
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 6) === peg$c245) {
                                                                                                                  s0 = peg$c245;
                                                                                                                  peg$currPos += 6;
                                                                                                                } else {
                                                                                                                  s0 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c246); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 6) === peg$c247) {
                                                                                                                    s0 = peg$c247;
                                                                                                                    peg$currPos += 6;
                                                                                                                  } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c248); }
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 5) === peg$c249) {
                                                                                                                      s0 = peg$c249;
                                                                                                                      peg$currPos += 5;
                                                                                                                    } else {
                                                                                                                      s0 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c250); }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      if (input.substr(peg$currPos, 5) === peg$c251) {
                                                                                                                        s0 = peg$c251;
                                                                                                                        peg$currPos += 5;
                                                                                                                      } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c252); }
                                                                                                                      }
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 5) === peg$c253) {
                                                                                                                          s0 = peg$c253;
                                                                                                                          peg$currPos += 5;
                                                                                                                        } else {
                                                                                                                          s0 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c254); }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 5) === peg$c255) {
                                                                                                                            s0 = peg$c255;
                                                                                                                            peg$currPos += 5;
                                                                                                                          } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c256); }
                                                                                                                          }
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            if (input.substr(peg$currPos, 5) === peg$c257) {
                                                                                                                              s0 = peg$c257;
                                                                                                                              peg$currPos += 5;
                                                                                                                            } else {
                                                                                                                              s0 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c258); }
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              if (input.substr(peg$currPos, 5) === peg$c259) {
                                                                                                                                s0 = peg$c259;
                                                                                                                                peg$currPos += 5;
                                                                                                                              } else {
                                                                                                                                s0 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c260); }
                                                                                                                              }
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                if (input.substr(peg$currPos, 5) === peg$c261) {
                                                                                                                                  s0 = peg$c261;
                                                                                                                                  peg$currPos += 5;
                                                                                                                                } else {
                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c262); }
                                                                                                                                }
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  if (input.substr(peg$currPos, 5) === peg$c263) {
                                                                                                                                    s0 = peg$c263;
                                                                                                                                    peg$currPos += 5;
                                                                                                                                  } else {
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c264); }
                                                                                                                                  }
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    if (input.substr(peg$currPos, 4) === peg$c265) {
                                                                                                                                      s0 = peg$c265;
                                                                                                                                      peg$currPos += 4;
                                                                                                                                    } else {
                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c266); }
                                                                                                                                    }
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      if (input.substr(peg$currPos, 4) === peg$c267) {
                                                                                                                                        s0 = peg$c267;
                                                                                                                                        peg$currPos += 4;
                                                                                                                                      } else {
                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c268); }
                                                                                                                                      }
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        if (input.substr(peg$currPos, 4) === peg$c269) {
                                                                                                                                          s0 = peg$c269;
                                                                                                                                          peg$currPos += 4;
                                                                                                                                        } else {
                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c270); }
                                                                                                                                        }
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          if (input.substr(peg$currPos, 4) === peg$c271) {
                                                                                                                                            s0 = peg$c271;
                                                                                                                                            peg$currPos += 4;
                                                                                                                                          } else {
                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c272); }
                                                                                                                                          }
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            if (input.substr(peg$currPos, 4) === peg$c273) {
                                                                                                                                              s0 = peg$c273;
                                                                                                                                              peg$currPos += 4;
                                                                                                                                            } else {
                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c274); }
                                                                                                                                            }
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              if (input.substr(peg$currPos, 4) === peg$c275) {
                                                                                                                                                s0 = peg$c275;
                                                                                                                                                peg$currPos += 4;
                                                                                                                                              } else {
                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c276); }
                                                                                                                                              }
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                if (input.substr(peg$currPos, 4) === peg$c277) {
                                                                                                                                                  s0 = peg$c277;
                                                                                                                                                  peg$currPos += 4;
                                                                                                                                                } else {
                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c278); }
                                                                                                                                                }
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  if (input.substr(peg$currPos, 4) === peg$c279) {
                                                                                                                                                    s0 = peg$c279;
                                                                                                                                                    peg$currPos += 4;
                                                                                                                                                  } else {
                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c280); }
                                                                                                                                                  }
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    if (input.substr(peg$currPos, 4) === peg$c281) {
                                                                                                                                                      s0 = peg$c281;
                                                                                                                                                      peg$currPos += 4;
                                                                                                                                                    } else {
                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c282); }
                                                                                                                                                    }
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      if (input.substr(peg$currPos, 4) === peg$c283) {
                                                                                                                                                        s0 = peg$c283;
                                                                                                                                                        peg$currPos += 4;
                                                                                                                                                      } else {
                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c284); }
                                                                                                                                                      }
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        if (input.substr(peg$currPos, 4) === peg$c285) {
                                                                                                                                                          s0 = peg$c285;
                                                                                                                                                          peg$currPos += 4;
                                                                                                                                                        } else {
                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c286); }
                                                                                                                                                        }
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          if (input.substr(peg$currPos, 4) === peg$c287) {
                                                                                                                                                            s0 = peg$c287;
                                                                                                                                                            peg$currPos += 4;
                                                                                                                                                          } else {
                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c288); }
                                                                                                                                                          }
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            if (input.substr(peg$currPos, 3) === peg$c289) {
                                                                                                                                                              s0 = peg$c289;
                                                                                                                                                              peg$currPos += 3;
                                                                                                                                                            } else {
                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c290); }
                                                                                                                                                            }
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              if (input.substr(peg$currPos, 3) === peg$c291) {
                                                                                                                                                                s0 = peg$c291;
                                                                                                                                                                peg$currPos += 3;
                                                                                                                                                              } else {
                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c292); }
                                                                                                                                                              }
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                if (input.substr(peg$currPos, 3) === peg$c293) {
                                                                                                                                                                  s0 = peg$c293;
                                                                                                                                                                  peg$currPos += 3;
                                                                                                                                                                } else {
                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c294); }
                                                                                                                                                                }
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  if (input.charCodeAt(peg$currPos) === 97) {
                                                                                                                                                                    s0 = peg$c295;
                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                  } else {
                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c296); }
                                                                                                                                                                  }
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 103) {
                                                                                                                                                                      s0 = peg$c297;
                                                                                                                                                                      peg$currPos++;
                                                                                                                                                                    } else {
                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c298); }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseID() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsekeyWord();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidword();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c299(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    if (peg$c300.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c301); }
    }

    return s0;
  }

  function peg$parseINT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (peg$c302.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c303); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXP() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 69) {
      s1 = peg$c304;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c305); }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 101) {
        s1 = peg$c306;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c307); }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 43) {
        s2 = peg$c47;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c49;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINT();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFLOAT() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c132;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDIGIT();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEXP();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (peg$c302.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c303); }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDIGIT();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDIGIT();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEXP();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (peg$c302.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c303); }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c132;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c133); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseDIGIT();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseDIGIT();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEXP();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              if (peg$c302.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c303); }
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseCOMPLEX() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseINT();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 105) {
        s2 = peg$c308;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c309); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFLOAT();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 105) {
          s2 = peg$c308;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c309); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseHEX() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c310;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c311); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 120) {
        s2 = peg$c312;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c313); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 88) {
          s2 = peg$c314;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c315); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseHEXDIGIT();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseHEXDIGIT();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (peg$c302.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c303); }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXDIGIT() {
    var s0;

    if (peg$c300.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c301); }
    }
    if (s0 === peg$FAILED) {
      if (peg$c316.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c317); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c318.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c319); }
        }
      }
    }

    return s0;
  }

  function peg$parseHEX_ESCAPE() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c320;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHEXDIGIT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseHEXDIGIT();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOCTAL_ESCAPE() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c320;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c322.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c324.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c325); }
        }
        if (s3 !== peg$FAILED) {
          if (peg$c324.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c325); }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c320;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c324.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c325); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$c324.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c325); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c320;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c321); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c324.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c325); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseUNICODE_ESCAPE() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c320;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 117) {
        s2 = peg$c326;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c327); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseHEXDIGIT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseHEXDIGIT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseHEXDIGIT();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseHEXDIGIT();
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c320;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 117) {
          s2 = peg$c326;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c327); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c25;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseHEXDIGIT();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseHEXDIGIT();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseHEXDIGIT();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseHEXDIGIT();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c27;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c28); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseESC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c320;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c328.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c329); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseUNICODE_ESCAPE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEX_ESCAPE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOCTAL_ESCAPE();
        }
      }
    }

    return s0;
  }

  function peg$parsesub() {
    var s0;

    s0 = peg$parseexpr();
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c53) {
        s0 = peg$c53;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
    }

    return s0;
  }

  function peg$parsesubg() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesub();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsesub();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c55;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
    }

    return s0;
  }

  function peg$parsesublist() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsesubg();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsesubg();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTRINGLITERAL() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c330;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c331); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDOUBLESTRINGCHARACTER();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDOUBLESTRINGCHARACTER();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c330;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c331); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c332;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c333); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSINGLESTRINGCHARACTER();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSINGLESTRINGCHARACTER();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c332;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c333); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDOUBLESTRINGCHARACTER() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (peg$c334.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c335); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c320;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSINGLESTRINGCHARACTER() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (peg$c336.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c337); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c320;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c338;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c339); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseNL();
      if (s5 === peg$FAILED) {
        s5 = peg$parseEOF();
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseNL();
        if (s5 === peg$FAILED) {
          s5 = peg$parseEOF();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      var mssgStack=[];
      
      
      var contextStack=[];
      
      function comparePos( r1, c1, r2, c2){
          console.log("comparePos");
          console.log(JSON.stringify(r1));
          console.log(JSON.stringify(c1));
          console.log(JSON.stringify(r2));
          console.log(JSON.stringify(c2));
          if( r1<r2 ){
                  return 1;
          }
           if( r1>r2 ){
              return -1;
          }
          if(r1===r2){
              if(c1<c2){
                  return 1;
              } 
              if(c1>c2){
                  return -1;
              } 
          }
          return 0;
      };
      
      function pushContext( svgEleInfo, cursorPos){
      console.log("pushContext");
          if(cursorPos){
      console.log("cursorPos=");
      console.log(JSON.stringify(cursorPos));
      console.log("svgEleInfo=");
      console.log(JSON.stringify(svgEleInfo));
      console.log("fuck=");
      console.log("svgEleInfo.location.start.line",svgEleInfo.location.start.line);
      console.log("svgEleInfo.location.start.column",svgEleInfo.location.start.column);
      console.log("cursorPos.row",cursorPos.row);
      console.log("cursorPos.column",cursorPos.column);
      var comp1=comparePos( 
                      svgEleInfo.location.start.line, 
                      svgEleInfo.location.start.column,
                      cursorPos.row,
                      cursorPos.column
                  );
      console.log("comp1=" + comp1);
      var comp2=comparePos( 
                      cursorPos.row,
                      cursorPos.column,
                      svgEleInfo.location.end.line, 
                      svgEleInfo.location.end.column
                  );
      console.log(", comp2=" + comp2);
              if(
                  comparePos( 
                      svgEleInfo.location.start.line, 
                      svgEleInfo.location.start.column,
                      cursorPos.row,
                      cursorPos.column
                  )==1 
              &&
              comparePos( 
                      cursorPos.row,
                      cursorPos.column,
                      svgEleInfo.location.end.line, 
                      svgEleInfo.location.end.column
                  )==1 
              ){
                  contextStack.push(
                      {
                          token: svgEleInfo.token,
                          location: svgEleInfo.location
                      }
                  );

              }
          }
      };
      
      function clearContext(){
          contextStack=[];
      };
      
      function addWarning( text, alocation ){
          mssgStack.push(
          {
              message: text,
              location: alocation,
              type: "warning"
          });
      };
      
      
      function addError( text, alocation ){
          mssgStack.push(
          {
              message: text,
              location: alocation,
              type: "error"
          });
      };
      
      function clearMssgs(){
          mssgStack=[];
      };
      
      
      function showResult(title, result){
          console.log("\n" + title + " Result:\n" + JSON.stringify(result) +"\n");
      }
      
      
      Array.prototype.hasValue = function(value) {
        var i;
        for (i=0; i<this.length; i++) { if (this[i] === value) return true; }
        return false;
      };
      
      function SvgAttrInfo(tok, loc){
          this.token=tok;
          this.location=loc;
      };
     
      function SvgEleInfo(tok, loc){
          this.token=tok;
          this.location=loc;
      };
      
      function printLocation(loc){
          if(loc){
              console.log("location: " + loc.start.line + "," + loc.start.column);
          } else {
              console.log("location is null");
          }
      };

  var acceptedAttributes = {
   "a" : [ "class", "clip.path", "color.interpolation", "color.rendering", "cursor", "display", "enable.background", "externalResourcesRequired", "filter", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "target", "transform", "visibility", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "view" : [ "externalResourcesRequired", "id", "preserveAspectRatio", "viewBox", "viewTarget", "xml.base", "xml.lang", "xml.space", "zoomAndPan" ],
  "text" : [ "class", "clip.path", "clip.rule", "color", "color.interpolation", "color.rendering", "cursor", "cxy", "direction", "display", "display", "dominant.baseline", "dx", "dxy", "dy", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "filter", "font.family", "font.size", "font.size.adjust", "font.stretch", "font.style", "font.variant", "font.weight", "glyph.orientation.horizontal", "glyph.orientation.vertical", "id", "kerning", "lengthAdjust", "letter.spacing", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pointer.events", "requiredExtensions", "requiredFeatures", "rotate", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "text.anchor", "text.decoration", "text.rendering", "textLength", "transform", "unicode.bidi", "visibility", "visibility", "word.spacing", "writing.mode", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "tspan" : [ "alignment.baseline", "baseline.shift", "class", "color", "cxy", "direction", "display", "dominant.baseline", "dx", "dxy", "dy", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "font.family", "font.size", "font.size.adjust", "font.stretch", "font.style", "font.variant", "font.weight", "glyph.orientation.horizontal", "glyph.orientation.vertical", "id", "kerning", "lengthAdjust", "letter.spacing", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rotate", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "text.anchor", "text.decoration", "textLength", "unicode.bidi", "visibility", "word.spacing", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "tref" : [ "alignment.baseline", "baseline.shift", "class", "color", "direction", "display", "dominant.baseline", "dx", "dxy", "dy", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "font.family", "font.size", "font.size.adjust", "font.stretch", "font.style", "font.variant", "font.weight", "glyph.orientation.horizontal", "glyph.orientation.vertical", "id", "kerning", "lengthAdjust", "letter.spacing", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rotate", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "text.anchor", "text.decoration", "textLength", "unicode.bidi", "visibility", "word.spacing", "x", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "textPath" : [ "alignment.baseline", "baseline.shift", "class", "color", "cxy", "direction", "display", "dominant.baseline", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "font.family", "font.size", "font.size.adjust", "font.stretch", "font.style", "font.variant", "font.weight", "glyph.orientation.horizontal", "glyph.orientation.vertical", "id", "kerning", "lengthAdjust", "letter.spacing", "method", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "spacing", "startOffset", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "text.anchor", "text.decoration", "textLength", "unicode.bidi", "visibility", "word.spacing", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "altGlyph" : [ "alignment.baseline", "baseline.shift", "class", "color", "direction", "display", "dominant.baseline", "dx", "dxy", "dy", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "font.family", "font.size", "font.size.adjust", "font.stretch", "font.style", "font.variant", "font.weight", "format", "glyph.orientation.horizontal", "glyph.orientation.vertical", "glyphRef", "id", "kerning", "letter.spacing", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rotate", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "text.anchor", "text.decoration", "unicode.bidi", "visibility", "word.spacing", "x", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "altGlyphDef" : [ "id", "xml.base", "xml.lang", "xml.space" ],
  "altGlyphItem" : [ "id", "xml.base", "xml.lang", "xml.space" ],
  "glyphRef" : [ "class", "dx", "dxy", "dy", "format", "glyphRef", "id", "style", "x", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "animate" : [ "accumulate", "additive", "attributeName", "attributeType", "begin", "by", "calcMode", "color.interpolation", "color.rendering", "dur", "end", "externalResourcesRequired", "fill", "from", "id", "keySplines", "keyTimes", "max", "min", "onbegin", "onend", "onload", "onrepeat", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "systemLanguage", "to", "values", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "set" : [ "attributeName", "attributeType", "begin", "dur", "end", "externalResourcesRequired", "fill", "id", "max", "min", "onbegin", "onend", "onload", "onrepeat", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "systemLanguage", "to", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "animateMotion" : [ "accumulate", "additive", "begin", "by", "calcMode", "dur", "end", "externalResourcesRequired", "fill", "from", "id", "keyPoints", "keySplines", "keyTimes", "max", "min", "onbegin", "onend", "onload", "onrepeat", "origin", "path", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "rotate", "systemLanguage", "to", "values", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "mpath" : [ "externalResourcesRequired", "id", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "animateColor" : [ "accumulate", "additive", "attributeName", "attributeType", "begin", "by", "calcMode", "color.interpolation", "color.rendering", "dur", "end", "externalResourcesRequired", "fill", "from", "id", "keySplines", "keyTimes", "max", "min", "onbegin", "onend", "onload", "onrepeat", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "systemLanguage", "to", "values", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "animateTransform" : [ "accumulate", "additive", "attributeName", "attributeType", "begin", "by", "calcMode", "dur", "end", "externalResourcesRequired", "fill", "from", "id", "keySplines", "keyTimes", "max", "min", "onbegin", "onend", "onload", "onrepeat", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "systemLanguage", "to", "type", "values", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "rect" : [ "class", "clip.path", "clip.rule", "color", "color.interpolation", "color.rendering", "cursor", "cxy", "display", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "filter", "height", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pointer.events", "requiredExtensions", "requiredFeatures", "rx", "rxy", "ry", "shape.rendering", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "transform", "visibility", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "circle" : [ "class", "clip.path", "clip.rule", "color", "color.interpolation", "color.rendering", "cursor", "cx", "cxy", "cy", "display", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "filter", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pointer.events", "r", "requiredExtensions", "requiredFeatures", "shape.rendering", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "transform", "visibility", "xml.base", "xml.lang", "xml.space" ],
  "ellipse" : [ "class", "clip.path", "clip.rule", "color", "color.interpolation", "color.rendering", "cursor", "cx", "cxy", "cy", "display", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "filter", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pointer.events", "requiredExtensions", "requiredFeatures", "rx", "rxy", "ry", "shape.rendering", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "transform", "visibility", "xml.base", "xml.lang", "xml.space" ],
  "line" : [ "class", "clip.path", "clip.rule", "color", "color.interpolation", "color.rendering", "cursor", "display", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "filter", "id", "marker.end", "marker.end", "marker.mid", "marker.mid", "marker.start", "marker.start", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pointer.events", "requiredExtensions", "requiredFeatures", "shape.rendering", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "transform", "visibility", "x1", "x12", "x2", "xml.base", "xml.lang", "xml.space", "xy1", "xy2", "y1", "y12", "y2" ],
  "polyline" : [ "class", "clip.path", "clip.rule", "color", "color.interpolation", "color.rendering", "cursor", "display", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "filter", "id", "marker.end", "marker.end", "marker.mid", "marker.mid", "marker.start", "marker.start", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pointer.events", "points", "requiredExtensions", "requiredFeatures", "shape.rendering", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "transform", "visibility", "xml.base", "xml.lang", "xml.space" ],
  "polygon" : [ "class", "clip.path", "clip.rule", "color", "color.interpolation", "color.rendering", "cursor", "display", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "filter", "id", "marker.end", "marker.end", "marker.mid", "marker.mid", "marker.start", "marker.start", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pointer.events", "points", "requiredExtensions", "requiredFeatures", "shape.rendering", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "transform", "visibility", "xml.base", "xml.lang", "xml.space" ],
  "clipPath" : [ "class", "clip.path", "clipPathUnits", "externalResourcesRequired", "id", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml.base", "xml.lang", "xml.space" ],
  "mask" : [ "class", "clip.path", "color.interpolation", "color.rendering", "cursor", "cxy", "enable.background", "externalResourcesRequired", "height", "id", "mask", "maskContentUnits", "maskUnits", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "color.profile" : [ "id", "local", "name", "rendering.intent", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "cursor" : [ "externalResourcesRequired", "id", "requiredExtensions", "requiredFeatures", "systemLanguage", "x", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "svg" : [ "baseProfile", "class", "clip", "clip.path", "color.interpolation", "color.rendering", "contentScriptType", "contentStyleType", "cursor", "cxy", "display", "enable.background", "externalResourcesRequired", "filter", "height", "id", "mask", "onabort", "onactivate", "onclick", "onerror", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "onresize", "onscroll", "onunload", "onzoom", "opacity", "overflow", "preserveAspectRatio", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "version", "viewBox", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y", "zoomAndPan" ],
  "g" : [ "class", "clip.path", "color.interpolation", "color.rendering", "cursor", "display", "enable.background", "externalResourcesRequired", "filter", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml.base", "xml.lang", "xml.space" ],
  "defs" : [ "class", "clip.path", "color.interpolation", "color.rendering", "cursor", "enable.background", "externalResourcesRequired", "filter", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml.base", "xml.lang", "xml.space" ],
  "desc" : [ "class", "id", "style", "xml.base", "xml.lang", "xml.space" ],
  "title" : [ "class", "id", "style", "xml.base", "xml.lang", "xml.space" ],
  "symbol" : [ "class", "clip", "clip.path", "color.interpolation", "color.rendering", "cursor", "enable.background", "externalResourcesRequired", "filter", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "overflow", "preserveAspectRatio", "style", "viewBox", "xml.base", "xml.lang", "xml.space" ],
  "use" : [ "class", "clip.path", "clip.rule", "color.interpolation", "color.rendering", "cursor", "cxy", "display", "externalResourcesRequired", "filter", "height", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pointer.events", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "visibility", "wh", "width", "x", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "image" : [ "class", "clip", "clip.path", "clip.rule", "color.interpolation", "color.profile", "color.rendering", "cursor", "cxy", "display", "externalResourcesRequired", "filter", "height", "id", "image.rendering", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "overflow", "pointer.events", "preserveAspectRatio", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "visibility", "wh", "width", "x", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "switch" : [ "class", "clip.path", "color.interpolation", "color.rendering", "cursor", "display", "enable.background", "externalResourcesRequired", "filter", "id", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml.base", "xml.lang", "xml.space" ],
  "filter" : [ "class", "cxy", "externalResourcesRequired", "filterRes", "filterUnits", "height", "id", "primitiveUnits", "style", "wh", "width", "x", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feDistantLight" : [ "azimuth", "elevation", "id", "xml.base", "xml.lang", "xml.space" ],
  "fePointLight" : [ "id", "x", "xml.base", "xml.lang", "xml.space", "xyz", "y", "z" ],
  "feSpotLight" : [ "id", "limitingConeAngle", "pointsAtX", "pointsAtXYZ", "pointsAtY", "pointsAtZ", "specularExponent", "x", "xml.base", "xml.lang", "xml.space", "xyz", "y", "z" ],
  "feBlend" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "in1", "in12", "in2", "mode", "result", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feColorMatrix" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "in1", "result", "style", "type", "values", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feComponentTransfer" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "in1", "result", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feFuncR" : [ "amplitude", "exponent", "id", "intercept", "offset", "slope", "tableValues", "type", "xml.base", "xml.lang", "xml.space" ],
  "feFuncG" : [ "amplitude", "exponent", "id", "intercept", "offset", "slope", "tableValues", "type", "xml.base", "xml.lang", "xml.space" ],
  "feFuncB" : [ "amplitude", "exponent", "id", "intercept", "offset", "slope", "tableValues", "type", "xml.base", "xml.lang", "xml.space" ],
  "feFuncA" : [ "amplitude", "exponent", "id", "intercept", "offset", "slope", "tableValues", "type", "xml.base", "xml.lang", "xml.space" ],
  "feComposite" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "in1", "in12", "in2", "k1", "k1234", "k2", "k3", "k4", "operator", "result", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feConvolveMatrix" : [ "bias", "class", "color.interpolation.filters", "cxy", "divisor", "edgeMode", "height", "id", "in1", "kernelMatrix", "kernelUnitLength", "order", "preserveAlpha", "result", "style", "targetX", "targetXY", "targetY", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feDiffuseLighting" : [ "class", "color", "color.interpolation.filters", "cxy", "diffuseConstant", "height", "id", "in1", "kernelUnitLength", "lighting.color", "result", "style", "surfaceScale", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feDisplacementMap" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "in1", "in12", "in2", "result", "scale", "style", "wh", "width", "x", "xChannelSelector", "xml.base", "xml.lang", "xml.space", "xy", "y", "yChannelSelector" ],
  "feFlood" : [ "class", "color", "color.interpolation.filters", "cxy", "flood.color", "flood.opacity", "height", "id", "result", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feGaussianBlur" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "in1", "result", "stdDeviation", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feImage" : [ "class", "color.interpolation.filters", "cxy", "externalResourcesRequired", "height", "id", "preserveAspectRatio", "result", "style", "wh", "width", "x", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feMerge" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "result", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feMergeNode" : [ "id", "in1", "xml.base", "xml.lang", "xml.space" ],
  "feMorphology" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "in1", "operator", "radius", "result", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feOffset" : [ "class", "color.interpolation.filters", "cxy", "dx", "dxy", "dy", "height", "id", "in1", "result", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feSpecularLighting" : [ "class", "color", "color.interpolation.filters", "cxy", "height", "id", "in1", "kernelUnitLength", "lighting.color", "result", "specularConstant", "specularExponent", "style", "surfaceScale", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feTile" : [ "class", "color.interpolation.filters", "cxy", "height", "id", "in1", "result", "style", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "feTurbulence" : [ "baseFrequency", "class", "color.interpolation.filters", "cxy", "height", "id", "numOctaves", "result", "seed", "stitchTiles", "style", "type", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "font" : [ "class", "externalResourcesRequired", "horiz.adv.x", "horiz.origin.x", "horiz.origin.xy", "horiz.origin.y", "id", "style", "vert.adv.y", "vert.origin.x", "vert.origin.xy", "vert.origin.y", "xml.base", "xml.lang", "xml.space" ],
  "glyph" : [ "arabic.form", "class", "clip.path", "color.interpolation", "color.rendering", "cursor", "d", "enable.background", "filter", "glyph.name", "horiz.adv.x", "id", "lang", "mask", "opacity", "orientation", "style", "unicode", "vert.adv.y", "vert.origin.x", "vert.origin.xy", "vert.origin.y", "xml.base", "xml.lang", "xml.space" ],
  "missing.glyph" : [ "class", "clip.path", "color.interpolation", "color.rendering", "cursor", "d", "enable.background", "filter", "horiz.adv.x", "id", "mask", "opacity", "style", "vert.adv.y", "vert.origin.x", "vert.origin.xy", "vert.origin.y", "xml.base", "xml.lang", "xml.space" ],
  "hkern" : [ "g1", "g12", "g2", "id", "k", "u1", "u12", "u2", "xml.base", "xml.lang", "xml.space" ],
  "vkern" : [ "g1", "g12", "g2", "id", "k", "u1", "u12", "u2", "xml.base", "xml.lang", "xml.space" ],
  "font.face" : [ "accent.height", "alphabetic", "ascent", "bbox", "cap.height", "descent", "font.family", "font.size", "font.stretch", "font.style", "font.variant", "font.weight", "hanging", "id", "ideographic", "mathematical", "overline.position", "overline.thickness", "panose.1", "slope", "stemh", "stemv", "strikethrough.position", "strikethrough.thickness", "underline.position", "underline.thickness", "unicode.range", "units.per.em", "v.alphabetic", "v.hanging", "v.ideographic", "v.mathematical", "widths", "x.height", "xml.base", "xml.lang", "xml.space" ],
  "font.face.src" : [ "id", "xml.base", "xml.lang", "xml.space" ],
  "font.face.uri" : [ "id", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "font.face.format" : [ "id", "string", "xml.base", "xml.lang", "xml.space" ],
  "font.face.name" : [ "id", "name", "xml.base", "xml.lang", "xml.space" ],
  "foreignObject" : [ "class", "clip", "cxy", "display", "externalResourcesRequired", "height", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "overflow", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "wh", "width", "x", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "linearGradient" : [ "class", "colors", "externalResourcesRequired", "gradientTransform", "gradientUnits", "id", "offsets", "spreadMethod", "style", "x1", "x12", "x2", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy1", "xy2", "y1", "y12", "y2" ],
  "radialGradient" : [ "class", "colors", "cx", "cxy", "cy", "externalResourcesRequired", "fx", "fxy", "fy", "gradientTransform", "gradientUnits", "id", "offsets", "r", "spreadMethod", "style", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "stop" : [ "class", "color", "id", "offset", "stop.color", "stop.opacity", "style", "xml.base", "xml.lang", "xml.space" ],
  "pattern" : [ "class", "clip", "clip.path", "color.interpolation", "color.rendering", "cursor", "cxy", "enable.background", "externalResourcesRequired", "filter", "height", "id", "mask", "opacity", "overflow", "patternContentUnits", "patternTransform", "patternUnits", "preserveAspectRatio", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "viewBox", "wh", "width", "x", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space", "xy", "y" ],
  "marker" : [ "class", "clip", "clip.path", "color.interpolation", "color.rendering", "cursor", "enable.background", "externalResourcesRequired", "filter", "id", "markerHeight", "markerUnits", "markerWidth", "mask", "opacity", "orient", "overflow", "preserveAspectRatio", "refX", "refXY", "refY", "style", "viewBox", "xml.base", "xml.lang", "xml.space" ],
  "metadata" : [ "id", "xml.base", "xml.lang", "xml.space" ],
  "path" : [ "class", "clip.path", "clip.rule", "color", "color.interpolation", "color.rendering", "cursor", "d", "display", "externalResourcesRequired", "fill", "fill.opacity", "fill.rule", "filter", "id", "marker.end", "marker.end", "marker.mid", "marker.mid", "marker.start", "marker.start", "mask", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "opacity", "pathLength", "pointer.events", "requiredExtensions", "requiredFeatures", "shape.rendering", "stroke", "stroke.dasharray", "stroke.dashoffset", "stroke.linecap", "stroke.linejoin", "stroke.miterlimit", "stroke.opacity", "stroke.width", "style", "systemLanguage", "transform", "visibility", "xml.base", "xml.lang", "xml.space" ],
  "script" : [ "externalResourcesRequired", "id", "type", "xlink.actuate", "xlink.arcrole", "xlink.href", "xlink.role", "xlink.show", "xlink.title", "xlink.type", "xml.base", "xml.lang", "xml.space" ],
  "style" : [ "id", "media", "title", "type", "xml.base", "xml.lang", "xml.space" ],
  "svgR" : [ "baseProfile", "class", "clip", "clip.path", "color.interpolation", "color.rendering", "contentScriptType", "contentStyleType", "cursor", "cxy", "display", "enable.background", "externalResourcesRequired", "filter", "height", "id", "mask", "onabort", "onactivate", "onclick", "onerror", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "onresize", "onscroll", "onunload", "onzoom", "opacity", "overflow", "preserveAspectRatio", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "version", "viewBox", "wh", "width", "xml.base", "xml.lang", "xml.space", "xy", "zoomAndPan" ]
  };    


  var allElements = [
  "feComponentTransfer", "feSpecularLighting", "feDiffuseLighting", "feDisplacementMap", "animateTransform", "feConvolveMatrix", "font.face.format", "feDistantLight", "feGaussianBlur", "font.face.name", "linearGradient", "radialGradient", "animateMotion", "color.profile", "feColorMatrix", "font.face.src", "font.face.uri", "foreignObject", "missing.glyph", "altGlyphItem", "animateColor", "feMorphology", "fePointLight", "feTurbulence", "altGlyphDef", "feComposite", "feMergeNode", "feSpotLight", "font.face", "altGlyph", "clipPath", "feOffset", "glyphRef", "metadata", "polyline", "textPath", "animate", "ellipse", "feBlend", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feImage", "feMerge", "pattern", "polygon", "circle", "cursor", "feTile", "filter", "marker", "script", "switch", "symbol", "glyph", "hkern", "image", "mpath", "style", "title", "tspan", "vkern", "defs", "desc", "font", "line", "mask", "path", "rect", "stop", "svgR", "text", "tref", "view", "set", "svg", "use", "a", "g"
  ];

   var acceptContentEle = { 
  'a' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'view' : [ "desc", "title", "metadata" ],
  'text' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "tspan", "tref", "textPath", "altGlyph", "a" ],
  'tspan' : [ "desc", "title", "metadata", "a", "altGlyph", "animate", "animateColor", "set", "tref", "tspan" ],
  'tref' : [ "desc", "title", "metadata", "animate", "animateColor", "set" ],
  'textPath' : [ "desc", "title", "metadata", "a", "altGlyph", "animate", "animateColor", "set", "tref", "tspan" ],
  'altGlyphDef' : [ "glyphRef", "altGlyphItem" ],
  'altGlyphItem' : [ "glyphRef" ],
  'glyphRef' : [ "Empty." ],
  'animate' : [ "desc", "title", "metadata" ],
  'set' : [ "desc", "title", "metadata" ],
  'animateMotion' : [ "desc", "title", "metadata", "mpath" ],
  'mpath' : [ "desc", "title", "metadata" ],
  'animateColor' : [ "desc", "title", "metadata" ],
  'animateTransform' : [ "desc", "title", "metadata" ],
  'rect' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'circle' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'ellipse' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'line' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'polyline' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'polygon' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'clipPath' : [ "desc", "title", "metadata", "animate", "set", "animateMotion", "animateColor", "animateTransform", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "text", "use" ],
  'mask' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'color.profile' : [ "desc", "title", "metadata" ],
  'cursor' : [ "desc", "title", "metadata" ],
  'svg' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'g' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'defs' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'symbol' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'use' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'image' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'switch' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "a", "foreignObject", "g", "image", "svg", "switch", "text", "use" ],
  'filter' : [ "desc", "title", "metadata", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feFlood", "feGaussianBlur", "feImage", "feMerge", "feMorphology", "feOffset", "feSpecularLighting", "feTile", "feTurbulence", "animate", "set" ],
  'feDistantLight' : [ "animate", "set" ],
  'fePointLight' : [ "animate", "set" ],
  'feSpotLight' : [ "animate", "set" ],
  'feBlend' : [ "animate", "set" ],
  'feColorMatrix' : [ "animate", "set" ],
  'feComponentTransfer' : [ "feFuncA", "feFuncB", "feFuncG", "feFuncR" ],
  'feFuncR' : [ "animate", "set" ],
  'feFuncG' : [ "animate", "set" ],
  'feFuncB' : [ "animate", "set" ],
  'feFuncA' : [ "animate", "set" ],
  'feComposite' : [ "animate", "set" ],
  'feConvolveMatrix' : [ "animate", "set" ],
  'feDiffuseLighting' : [ "desc", "title", "metadata", "feDistantLight", "fePointLight", "feSpotLight" ],
  'feDisplacementMap' : [ "animate", "set" ],
  'feFlood' : [ "animate", "animateColor", "set" ],
  'feGaussianBlur' : [ "animate", "set" ],
  'feImage' : [ "animate", "animateTransform", "set" ],
  'feMerge' : [ "feMergeNode" ],
  'feMergeNode' : [ "animate", "set" ],
  'feMorphology' : [ "animate", "set" ],
  'feOffset' : [ "animate", "set" ],
  'feSpecularLighting' : [ "desc", "title", "metadata", "feDistantLight", "fePointLight", "feSpotLight" ],
  'feTile' : [ "animate", "set" ],
  'feTurbulence' : [ "animate", "set" ],
  'font' : [ "desc", "title", "metadata", "font.face", "glyph", "hkern", "missing.glyph", "vkern" ],
  'glyph' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'missing.glyph' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'hkern' : [ "Empty." ],
  'vkern' : [ "Empty." ],
  'font.face' : [ "desc", "title", "metadata", "font.face.src" ],
  'font.face.src' : [ "font.face.name", "font.face.uri" ],
  'font.face.uri' : [ "font.face.format" ],
  'font.face.format' : [ "Empty." ],
  'font.face.name' : [ "Empty." ],
  'linearGradient' : [ "desc", "title", "metadata", "animate", "animateTransform", "set", "stop" ],
  'radialGradient' : [ "desc", "title", "metadata", "animate", "animateTransform", "set", "stop" ],
  'stop' : [ "animate", "animateColor", "set" ],
  'pattern' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'marker' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  'path' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata" ],
  'svgR' : [ "animate", "set", "animateMotion", "animateColor", "animateTransform", "desc", "title", "metadata", "rect", "circle", "ellipse", "line", "polyline", "polygon", "path", "svg", "g", "defs", "symbol", "use", "linearGradient", "radialGradient", "a", "altGlyphDef", "clipPath", "color.profile", "cursor", "filter", "font", "font.face", "foreignObject", "image", "marker", "mask", "pattern", "script", "style", "switch", "text", "view" ],
  };


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
